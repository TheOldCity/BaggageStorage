@using  BaggageStorage.Data;
@inject IViewLocalizer Localizer
@inject AppDbContext db;

@{

    Layout = null;

    var controllerName = this.ViewContext.RouteData.Values["controller"].ToString();
    var actionName = this.ViewContext.RouteData.Values["action"].ToString();
    var viewFileName = String.Format("/View/{0}/{1}.cshtml", controllerName, actionName);
    var storageKey = "storage_mainmenu_grid";

    var title = Localizer["Глобальные пункты меню"].Value;

    AppDbContext _db = db;

    //var globalIcon = _db.MainMenu.
}

@using (Html.DevExtreme().NamedTemplate("popup-template-info"))
{
    <div id="scrollview-demo">
        @(Html.DevExtreme().ScrollView()
            .ID("scrollview")
            .ScrollByContent(true)
            .ScrollByThumb(true)
            .Height(750)
            //.OnReachBottom("scrollView_reachBottom")
            //.ReachBottomText("Updating...")
            .ShowScrollbar(ShowScrollbarMode.Always)
            .OnUpdated("upd")
            .Content(@<text>
                @await Html.PartialAsync("SelectIcons")
            </text>)
        )
    </div>
}

    <script>
        var cellIdForIcon = null;

    function upd(args) {
        if ($(event.target).text() != "") {
            $("#table-icon").click(function (event) {
                event.preventDefault();
                if ($("#popup-snapshorts").dxPopup('instance')._currentVisible == true) {
                    var child = null;
                    var result = null;
                    if ($(event.target.children.length > 0)) {
                        child = $(event.target.children);
                        result = child.attr("class");
                    }
                    else {
                        result = $(event.target.className).selector;

                    }
                    if (result != undefined && (result[0] == "f" || result[0] == "i" || result[0] == "g")) {
                        //alert(result);
                        $.ajax({
                            type: "POST",
                            url: "/api/mainmenu/changeIcon",
                            data: {
                                cellIdForIcon: cellIdForIcon,
                                result: result
                            },
                            success: function () {
                                $("#menu-tree-list").dxTreeList('instance').endCustomLoading("");
                                $("#menu-tree-list").dxTreeList('instance').refresh();
                            },
                            error: function (e) {
                                $("#menu-tree-list").dxTreeList('instance').endCustomLoading("");
                                toastr["error"]("HTTP Status: " + e.status);
                            }
                        });

                        $("#popup-snapshorts").dxPopup("toggle", false)
                    }
                }
            });
        }




    }

    function scrollView_reachBottom(args) {
        updateScrollViewContent("ReachBottom", false);
    }


    var mainmenu = {

        dxTreeList: undefined,

        closePortlet: function () {
            $("#portlet_mainmenu").remove();
            $("#tab-opened-portlet-mainmenu").remove();
            $(".a-tab-opened-portlet:first").click();
        },

        menuTree_RowPrepared: function (e) {
            if (e.rowType != 'data')
                return;
            e.rowElement
                .addClass('myRow')
                .data('keyValue', e.key);
        },

        menuTree_ContentReady: function (e) {
            mainmenu.initDragging(e.element);

            mainmenu.dxTreeList.focus(mainmenu.dxTreeList.getCellElement(0, 'id'));
        },

        menuTree_CellClick: function (e) {
            if (e.rowType == 'header')
                return;
            if ($(e.cellElement).parent().index() <= mainmenu.dxTreeList.getVisibleRows().length - 1)
                mainmenu.dxTreeList.focus(e.cellElement);
            var id = e.data.id;

            if (e.columnIndex == 4) {
                cellCameraClick1(id);

            }
            
        },

        initDragging: function ($treeElement) {
            $treeElement.find('.myRow').draggable({
                helper: 'clone',
                start: function (event, ui) {
                    var $originalRow = $(this),
                        $clonedRow = ui.helper;
                    var $originalRowCells = $originalRow.children(),
                        $clonedRowCells = $clonedRow.children();
                    for (var i = 0; i < $originalRowCells.length; i++)
                        $($clonedRowCells.get(i)).width($($originalRowCells.get(i)).width());
                    $clonedRow
                        .width($originalRow.width())
                        .addClass('drag-helper');
                }
            });
            $treeElement.find('.myRow').droppable({
                drop: function (event, ui) {
                    var draggingRowKey = ui.draggable.data('keyValue');
                    var targetRowKey = $(this).data('keyValue');

                    $("#menu-tree-list").dxTreeList('instance').beginCustomLoading("");

                    $.ajax({
                        type: "POST",
                        url: "/api/mainmenu/reorder",
                        data: {
                            draggingRowKey: draggingRowKey,
                            targetRowKey: targetRowKey,
                            shiftPressed: event.shiftKey
                        },
                        success: function () {
                            $("#menu-tree-list").dxTreeList('instance').endCustomLoading("");
                            $treeElement.dxTreeList('instance').refresh();
                        },
                        error: function (e) {
                            $("#menu-tree-list").dxTreeList('instance').endCustomLoading("");
                            toastr["error"]("HTTP Status: " + e.status);
                        }
                    });

                }
            });
        },

        menuTree_RowUpdating: function menuTree_RowUpdating(e) {
            var loc = e.newData.location;
            var js = e.newData.jsFunction;

            if (loc == undefined)
                loc = e.oldData.location;
            if (js == undefined)
                js = e.oldData.jsFunction;

            if (loc != '' && js != '') {
                toastr["error"](Localizer["URL для перехода не будет работать, т.к. определена JS функция"].Value);
                e.cancel = true;
            }
        },

        menuTree_refresh: function () {
            mainmenu.dxTreeList.refresh();
        }
        }

        function cellCameraClick1(id) {
            cellIdForIcon = id;
            snapshortPopup.option("contentTemplate", $("#popup-template-info"));
            snapshortPopup.show();


        }

    function cellCameraTemplate(cellElement, cellInfo) {
        var customerId = cellInfo.row.data.CustomerId;
        var docId = cellInfo.row.data.id;
        var icon = cellInfo.row.data.icon;



        cellElement.html('<div style="overflow:  auto ; width: 100%; height: 100%; padding-bottom:0px; width:100%;cursor:pointer;text-align:center;" data-docid="' + docId + '" ><i class="' + icon + '"></i></div>');
    }

    </script>

<div class="portlet light portlet-fit full-height-content full-height-content-scrollable height-as-parent">
    <div class="portlet-title custom-title" style="margin-bottom:0px;">
        <div class="caption">
            <i class="icon-layers font-green portlet-header-icon"></i>
            <span class="caption-subject font-main-color bold uppercase">@title</span>
        </div>
        <div class="actions">
            <a class="btn btn-circle btn-icon-only btn-default" href="javascript:mainmenu.menuTree_refresh();">
                <i class="icon-refresh"></i>
            </a>
            <a class="btn btn-circle btn-icon-only btn-default fullscreen" href="javascript:;" data-original-title="" title=""> </a>
            <a class="btn btn-circle btn-icon-only btn-default" href="javascript:mainmenu.closePortlet();">
                <i class="dx-icon-close"></i>
            </a>
        </div>
    </div>
    <div class="portlet-body" style="margin-top:0px;height:auto;padding:0px;">

        <input type="hidden" id="mainmenu-view-name" value="@viewFileName" />
        <input type="hidden" id="mainmenu-storage-name" value='["@storageKey"]' />

        <div class="full-height-content-body">
            @(Html.DevExtreme().TreeList()
                                                                        .ID("menu-tree-list")
                                                                        .DataSource(ds => ds.WebApi().RouteName("MainMenuApi").LoadAction("Get").DeleteAction("Delete").InsertAction("Post").UpdateAction("Put").Key("id"))
                                                                        .KeyExpr("id")
                                                                        .ParentIdExpr("parentId")
                                                                        .HasItemsExpr("hasItems")
                                                                        .LoadPanel(s => s.ShowIndicator(true).ShowPane(true))
                                                                        .Selection(s => s.Mode(SelectionMode.Single))
                                                                        .OnRowPrepared("mainmenu.menuTree_RowPrepared")
                                                                        .OnContentReady("mainmenu.menuTree_ContentReady")
                                                                        .OnCellClick("mainmenu.menuTree_CellClick")
                                                                        .OnCellPrepared("table_cellPrepared")
                                                                        .OnRowUpdating("mainmenu.menuTree_RowUpdating")
                                                                        .HoverStateEnabled(true)
                                                                        .RowAlternationEnabled(true)
                                                                        .FocusStateEnabled(true)
                                                                        .SearchPanel(seachPanel => seachPanel.Visible(true))
                                                                        .Editing(editing => editing
                                                                            .Mode(GridEditMode.Row)
                                                                            .AllowAdding(true)
                                                                            .AllowUpdating(true)
                                                                            .AllowDeleting(true)
                                                                        )
                                                                        .ShowRowLines(true)
                                                                        .Columns(columns =>
                                                                        {
                                                                            columns.Add()
                                                                                .DataField("id")
                                                                                .Width(50)
                                                                                .AllowEditing(false)
                                                                                .Caption(Localizer["ID"].Value);

                                                                            columns.Add()
                                                                                .DataField("text")
                                                                                .Caption(Localizer["Название пункта меню RU"].Value)
                                                                                .MinWidth(250)
                                                                                .ValidationRules(vr => vr.AddRequired());

                                                                            columns.Add()
                                                                                .DataField("textRo")
                                                                                .Caption(Localizer["Название пункта меню RO"].Value)
                                                                                .MinWidth(250)
                                                                                .ValidationRules(vr => vr.AddRequired());

                                                                            columns.Add()
                                                                                .DataField("textEn")
                                                                                .Caption(Localizer["Название пункта меню EN"].Value)
                                                                                .MinWidth(250)
                                                                                .ValidationRules(vr => vr.AddRequired());

                                                                            columns.Add()
                                                                                //.DataField("icon")
                                                                                .CellTemplate(new JS("cellCameraTemplate"))
                                                                                .Caption(Localizer["Значок"].Value);

                                                                            columns.Add()
                                                                                .DataField("location")
                                                                                .Caption(Localizer["URL для перехода"].Value);

                                                                            columns.Add()
                                                                               .DataField("permissionEnumText")
                                                                               .Lookup(lookup => lookup
                                                                                   .DataSource(d => d.WebApi().RouteName("PermissionEnumsApi").LoadAction("Get").Key("id"))
                                                                                   .DisplayExpr("name")
                                                                                   .ValueExpr("id")
                                                                               )
                                                                               .Caption(Localizer["Enum значение"].Value);

                                                                            columns.Add()
                                                                                .DataField("jsFunction")
                                                                                .Caption(Localizer["JS функция"].Value);
                                                                            columns.Add()
                                                                                .DataField("isActive")
                                                                                .DataType(GridColumnDataType.Boolean)
                                                                                .CalculateCellValue(@"function(rowData) { return rowData.isActive == true; }")
                                                                                .Caption(Localizer["Активный"].Value);
                                                                        })
            )
        </div>
    </div>
</div>

@(Html.DevExtreme().Popup()
                                            .ID("popup-snapshorts")
                                            .ElementAttr("class", "popup")
                                            .Height(825)
                                            .ShowTitle(true)
                                            //.OnContentReady("scroll")
                                            .MaxWidth(900)
                                            .Title("Выбор значков")
                                            .Visible(false)
                                            .DragEnabled(true)
                                            .ResizeEnabled(true)
                                            .Shading(true)
                                            .CloseOnOutsideClick(false)
)

<script>
    var snapshortPopup = undefined;

    $(function () {
        snapshortPopup = $("#popup-snapshorts").dxPopup('instance');
    });

    $(function () {
        mainmenu.dxTreeList = $("#menu-tree-list").dxTreeList('instance');

        $('#portlet_mainmenu .dx-toolbar').hide();
        var a = $('#portlet_mainmenu .dx-toolbar-after').detach();
        $(a).appendTo('#portlet_mainmenu .portlet-title');

        $(window).resize(function () {
            mainmenu.dxTreeList.option("height", parseInt($("#portlet_mainmenu .height-as-parent").css('min-height')) - 63);
        });
    });

</script>
